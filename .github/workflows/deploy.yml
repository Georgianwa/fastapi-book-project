name: deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/fastapi:latest ${{ secrets.DOCKER_USERNAME }}/fastapi:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi:${{ github.sha }}

      - name: Deploy on Google Cloud
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          printf '%s' "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no georgia_u_nwa@34.69.88.137 << 'EOF'
            
            echo "ðŸ“¦ Ensuring Docker & Docker Compose are installed..."
            if ! command -v docker &> /dev/null; then
              echo "ðŸš¨ Docker is not installed. Installing..."
              sudo apt-get update && sudo apt-get install -y docker.io
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "ðŸš¨ Docker Compose is not installed. Installing..."
              sudo apt-get install -y docker-compose
            fi
            
            echo "ðŸ”„ Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi:latest

            echo "ðŸ›‘ Stopping old containers..."
            docker-compose down

            echo "ðŸ§¹ Cleaning up unused Docker images..."
            docker system prune -af

            echo "ðŸš€ Starting new containers..."
            docker-compose up -d --build

            echo "ðŸ”„ Restarting NGINX..."
            sudo systemctl restart nginx
          EOF
          rm -f private_key.pem
        